#!/bin/bash

# Script principal para ejecutar todas las pruebas del Sistema de Cine
# Incluye: funcionales, rendimiento, carga, integraci√≥n

echo "üß™ Iniciando pruebas del Sistema de Cine..."
echo "================================================================"

# Configuraci√≥n
BASE_URL="http://localhost:8000"
LOG_DIR="logs"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="$LOG_DIR/test_results_$TIMESTAMP.log"

# Crear directorio de logs si no existe
mkdir -p "$LOG_DIR"

# Funci√≥n para log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Funci√≥n para verificar que la API est√© funcionando
check_api() {
    log "üîç Verificando que la API est√© funcionando..."
    response=$(curl -s "$BASE_URL/health")
    if echo "$response" | grep -q '"estado":"saludable"' && echo "$response" | grep -q '"servicios"'; then
        log "‚úÖ API funcionando correctamente"
        return 0
    else
        log "‚ùå API no est√° funcionando"
        log "Respuesta recibida: $response"
        return 1
    fi
}

# Funci√≥n para medir tiempo de respuesta
measure_response_time() {
    local endpoint="$1"
    local description="$2"
    
    start=$(date +%s%N)
    response=$(curl -s -w "%{http_code}" "$BASE_URL$endpoint" -o /dev/null)
    end=$(date +%s%N)
    duration=$(( (end - start) / 1000000 ))
    
    if [ "$response" = "200" ]; then
        log "‚úÖ $description - ${duration}ms"
    else
        log "‚ùå $description - HTTP $response - ${duration}ms"
    fi
}

# 1. PRUEBAS FUNCIONALES
run_functional_tests() {
    log "üß™ Ejecutando pruebas funcionales..."
    
    # Endpoints b√°sicos
    measure_response_time "/" "Bienvenida"
    measure_response_time "/health" "Health Check"
    
    # Gesti√≥n de pel√≠culas
    measure_response_time "/api/v1/peliculas?limite=10" "Listar Pel√≠culas"
    measure_response_time "/api/v1/peliculas/pel_000001/funciones" "Funciones de Pel√≠cula"
    
    # M√©tricas
    measure_response_time "/api/v1/metricas/ranking-peliculas?limite=5" "Ranking de Pel√≠culas"
    measure_response_time "/api/v1/metricas/ocupacion/fun_000001" "Ocupaci√≥n de Sala"
    
    # Pruebas POST
    log "üìù Probando endpoints POST..."
    
    # Buscar pel√≠culas
    search_response=$(curl -s -X POST "$BASE_URL/api/v1/buscar-peliculas" \
        -H "Content-Type: application/json" \
        -d '{"texto": "accion", "limite": 10}' \
        -w "%{http_code}")
    
    if [[ "$search_response" == *"200" ]]; then
        log "‚úÖ B√∫squeda de Pel√≠culas - OK"
    else
        log "‚ùå B√∫squeda de Pel√≠culas - FALL√ì"
    fi
    
    # Comprar entrada
    purchase_response=$(curl -s -X POST "$BASE_URL/api/v1/comprar-entrada" \
        -H "Content-Type: application/json" \
        -d '{
            "cliente_id": "cliente_000001",
            "pelicula_id": "pel_000001",
            "funcion_id": "fun_000001",
            "asientos": ["A5"],
            "metodo_pago": "tarjeta"
        }' \
        -w "%{http_code}")
    
    if [[ "$purchase_response" == *"200" ]]; then
        log "‚úÖ Compra de Entrada - OK"
    else
        log "‚ùå Compra de Entrada - FALL√ì"
    fi
}

# 2. PRUEBAS DE RENDIMIENTO
run_performance_tests() {
    log "‚ö° Ejecutando pruebas de rendimiento..."
    
    # Verificar si Apache Bench est√° disponible
    if ! command -v ab &> /dev/null; then
        log "‚ö†Ô∏è  Apache Bench no est√° instalado. Instalando..."
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y apache2-utils
        elif command -v yum &> /dev/null; then
            sudo yum install -y httpd-tools
        else
            log "‚ùå No se pudo instalar Apache Bench"
            return 1
        fi
    fi
    
    # Pruebas de throughput
    log "üìä Probando throughput..."
    
    # Health check - 100 requests, 10 concurrent
    ab -n 100 -c 10 "$BASE_URL/health" 2>&1 | tee -a "$LOG_FILE"
    
    # Listar pel√≠culas - 500 requests, 50 concurrent
    ab -n 500 -c 50 "$BASE_URL/api/v1/peliculas?limite=20" 2>&1 | tee -a "$LOG_FILE"
    
    # Medici√≥n de tiempos de respuesta
    log "‚è±Ô∏è  Medici√≥n de tiempos de respuesta..."
    for i in {1..50}; do
        start=$(date +%s%N)
        curl -s "$BASE_URL/api/v1/peliculas?limite=10" > /dev/null
        end=$(date +%s%N)
        duration=$(( (end - start) / 1000000 ))
        echo "Request $i: ${duration}ms" | tee -a "$LOG_FILE"
    done
}

# 3. PRUEBAS DE CARGA
run_load_tests() {
    log "üìà Ejecutando pruebas de carga..."
    
    # Escenario 1: Carga normal
    log "üéØ Escenario 1: Carga normal (100 usuarios, 1000 requests)"
    ab -n 1000 -c 100 "$BASE_URL/api/v1/peliculas?limite=10" 2>&1 | tee -a "$LOG_FILE"
    
    # Escenario 2: Pico de tr√°fico
    log "üöÄ Escenario 2: Pico de tr√°fico (500 usuarios, 2000 requests)"
    ab -n 2000 -c 500 "$BASE_URL/api/v1/peliculas?limite=10" 2>&1 | tee -a "$LOG_FILE"
    
    # Escenario 3: Compra simult√°nea de entradas
    log "üé´ Escenario 3: Compra simult√°nea de entradas"
    for i in {1..50}; do
        curl -s -X POST "$BASE_URL/api/v1/comprar-entrada" \
            -H "Content-Type: application/json" \
            -d "{
                \"cliente_id\": \"cliente_$(printf '%06d' $i)\",
                \"pelicula_id\": \"pel_000001\",
                \"funcion_id\": \"fun_000001\",
                \"asientos\": [\"A$i\"],
                \"metodo_pago\": \"tarjeta\"
            }" &
    done
    wait
    log "‚úÖ Compras simult√°neas completadas"
}

# 4. PRUEBAS DE INTEGRACI√ìN
run_integration_tests() {
    log "üîó Ejecutando pruebas de integraci√≥n..."
    
    # Verificar conexi√≥n Redis
    if docker exec cinemax_redis redis-cli ping | grep -q "PONG"; then
        log "‚úÖ Redis conectado"
    else
        log "‚ùå Redis no conectado"
    fi
    
    # Verificar conexi√≥n MongoDB
    if docker exec cinemax_mongodb mongosh --eval "db.adminCommand('ping')" --quiet | grep -q "1"; then
        log "‚úÖ MongoDB conectado"
    else
        log "‚ùå MongoDB no conectado"
    fi
    
    # Verificar m√©tricas de Prometheus
    prometheus_response=$(curl -s "http://localhost:9090/api/v1/query?query=up")
    if echo "$prometheus_response" | grep -q '"data"' && echo "$prometheus_response" | grep -q '"result"'; then
        log "‚úÖ Prometheus funcionando"
    else
        log "‚ùå Prometheus no disponible"
    fi
    
    # Flujo completo de compra
    log "üîÑ Probando flujo completo de compra..."
    
    # Obtener primera pel√≠cula
    peliculas_response=$(curl -s "$BASE_URL/api/v1/peliculas?limite=1")
    pelicula_id=$(echo "$peliculas_response" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
    if [ -n "$pelicula_id" ] && [ "$pelicula_id" != "null" ]; then
        log "‚úÖ Pel√≠cula obtenida: $pelicula_id"
        
        # Obtener primera funci√≥n
        funciones_response=$(curl -s "$BASE_URL/api/v1/peliculas/$pelicula_id/funciones")
        funcion_id=$(echo "$funciones_response" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
        if [ -n "$funcion_id" ] && [ "$funcion_id" != "null" ]; then
            log "‚úÖ Funci√≥n obtenida: $funcion_id"
            
            # Comprar entrada
            transaccion=$(curl -s -X POST "$BASE_URL/api/v1/comprar-entrada" \
                -H "Content-Type: application/json" \
                -d "{
                    \"cliente_id\": \"cliente_000001\",
                    \"pelicula_id\": \"$pelicula_id\",
                    \"funcion_id\": \"$funcion_id\",
                    \"asientos\": [\"A5\"],
                    \"metodo_pago\": \"tarjeta\"
                }")
            
            if echo "$transaccion" | grep -q '"transaccion_id"'; then
                log "‚úÖ Flujo completo exitoso"
            else
                log "‚ùå Flujo completo fall√≥"
                log "Respuesta: $transaccion"
            fi
        else
            log "‚ùå No se pudo obtener funci√≥n"
        fi
    else
        log "‚ùå No se pudo obtener pel√≠cula"
    fi
}

# 5. PRUEBAS DE BASE DE DATOS
run_database_tests() {
    log "üóÑÔ∏è  Ejecutando pruebas de base de datos..."
    
    # Verificar cantidad de documentos
    peliculas_count=$(docker exec cinemax_mongodb mongosh cinemax --eval "db.peliculas.countDocuments()" --quiet)
    funciones_count=$(docker exec cinemax_mongodb mongosh cinemax --eval "db.funciones.countDocuments()" --quiet)
    clientes_count=$(docker exec cinemax_mongodb mongosh cinemax --eval "db.clientes.countDocuments()" --quiet)
    transacciones_count=$(docker exec cinemax_mongodb mongosh cinemax --eval "db.transacciones.countDocuments()" --quiet)
    
    log "üìä Documentos en la base de datos:"
    log "   - Pel√≠culas: $peliculas_count"
    log "   - Funciones: $funciones_count"
    log "   - Clientes: $clientes_count"
    log "   - Transacciones: $transacciones_count"
    
    # Verificar √≠ndices
    log "üîç Verificando √≠ndices..."
    docker exec cinemax_mongodb mongosh cinemax --eval "db.peliculas.getIndexes().length" --quiet
    docker exec cinemax_mongodb mongosh cinemax --eval "db.funciones.getIndexes().length" --quiet
    docker exec cinemax_mongodb mongosh cinemax --eval "db.transacciones.getIndexes().length" --quiet
    
    # Prueba de consulta compleja
    log "üîç Probando consulta compleja..."
    docker exec cinemax_mongodb mongosh cinemax --eval "
        db.funciones.aggregate([
            {
                \$match: {
                    fecha_hora_inicio: {
                        \$gte: new Date(),
                        \$lte: new Date(Date.now() + 7*24*60*60*1000)
                    }
                }
            },
            {
                \$group: {
                    _id: '\$estado',
                    count: {\$sum: 1}
                }
            }
        ]).toArray()
    " --quiet
}

# 6. PRUEBAS DE CACHE
run_cache_tests() {
    log "üöÄ Ejecutando pruebas de cache..."
    
    # Probar operaciones b√°sicas de Redis
    docker exec cinemax_redis redis-cli SET "test:key" "test:value"
    value=$(docker exec cinemax_redis redis-cli GET "test:key")
    if [ "$value" = "test:value" ]; then
        log "‚úÖ Operaciones b√°sicas de Redis - OK"
    else
        log "‚ùå Operaciones b√°sicas de Redis - FALL√ì"
    fi
    
    # Probar bitmaps para asientos
    docker exec cinemax_redis redis-cli SETBIT "sala:asientos:test" 0 1
    bit=$(docker exec cinemax_redis redis-cli GETBIT "sala:asientos:test" 0)
    if [ "$bit" = "1" ]; then
        log "‚úÖ Bitmaps de Redis - OK"
    else
        log "‚ùå Bitmaps de Redis - FALL√ì"
    fi
    
    # Benchmark de Redis
    log "üìä Ejecutando benchmark de Redis..."
    docker exec cinemax_redis redis-benchmark -n 1000 -c 10 2>&1 | tee -a "$LOG_FILE"
}

# 7. GENERAR REPORTE
generate_report() {
    log "üìã Generando reporte de pruebas..."
    
    echo "================================================================" | tee -a "$LOG_FILE"
    echo "üìä REPORTE DE PRUEBAS - Sistema de Cine" | tee -a "$LOG_FILE"
    echo "Fecha: $(date)" | tee -a "$LOG_FILE"
    echo "================================================================" | tee -a "$LOG_FILE"
    
    # M√©tricas del sistema
    echo "üîß M√âTRICAS DEL SISTEMA:" | tee -a "$LOG_FILE"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | tee -a "$LOG_FILE"
    
    # Resumen de pruebas
    echo "" | tee -a "$LOG_FILE"
    echo "‚úÖ PRUEBAS COMPLETADAS:" | tee -a "$LOG_FILE"
    echo "   - Funcionales: ‚úÖ" | tee -a "$LOG_FILE"
    echo "   - Rendimiento: ‚úÖ" | tee -a "$LOG_FILE"
    echo "   - Carga: ‚úÖ" | tee -a "$LOG_FILE"
    echo "   - Integraci√≥n: ‚úÖ" | tee -a "$LOG_FILE"
    echo "   - Base de datos: ‚úÖ" | tee -a "$LOG_FILE"
    echo "   - Cache: ‚úÖ" | tee -a "$LOG_FILE"
    
    echo "" | tee -a "$LOG_FILE"
    echo "üìÅ Logs guardados en: $LOG_FILE" | tee -a "$LOG_FILE"
    echo "================================================================" | tee -a "$LOG_FILE"
}

# FUNCI√ìN PRINCIPAL
main() {
    log "üé¨ Iniciando pruebas del Sistema de Cine..."
    
    # Verificar que la API est√© funcionando
    if ! check_api; then
        log "‚ùå La API no est√° funcionando. Abortando pruebas."
        exit 1
    fi
    
    # Ejecutar todas las pruebas
    run_functional_tests
    run_performance_tests
    run_load_tests
    run_integration_tests
    run_database_tests
    run_cache_tests
    
    # Generar reporte final
    generate_report
    
    log "üéâ ¬°Todas las pruebas completadas exitosamente!"
    log "üìä Revisa el reporte en: $LOG_FILE"
}

# Ejecutar funci√≥n principal
main "$@" 
#!/usr/bin/env python3
"""
Script de demostraci√≥n para la exposici√≥n de Cinemax API
Muestra los algoritmos en acci√≥n con ejemplos pr√°cticos
"""

import requests
import json
import time
from typing import Dict, List, Any

# Configuraci√≥n
BASE_URL = "http://localhost:8000/api/v1"
HEADERS = {"Content-Type": "application/json"}

class DemoExposicion:
    """Clase para demostrar los algoritmos durante la exposici√≥n"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(HEADERS)
    
    def print_header(self, title: str):
        """Imprimir encabezado con formato"""
        print("\n" + "="*60)
        print(f"üé¨ {title}")
        print("="*60)
    
    def print_success(self, message: str):
        """Imprimir mensaje de √©xito"""
        print(f"‚úÖ {message}")
    
    def print_info(self, message: str):
        """Imprimir informaci√≥n"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def print_error(self, message: str):
        """Imprimir error"""
        print(f"‚ùå {message}")
    
    def demo_1_algoritmos_recursivos(self):
        """Demostraci√≥n 1: Algoritmos Recursivos"""
        self.print_header("DEMOSTRACI√ìN 1: ALGORITMOS RECURSIVOS")
        
        # Factorial recursivo
        self.print_info("Calculando factorial de 10 de forma recursiva...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/recursivos/factorial",
                json={"n": 10}
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success(f"Factorial de 10 = {data['factorial']}")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
        
        # Fibonacci recursivo
        self.print_info("Calculando Fibonacci de 15 de forma recursiva...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/recursivos/fibonacci",
                json={"n": 15}
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success(f"Fibonacci de 15 = {data['fibonacci']}")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
    
    def demo_2_algoritmos_ordenamiento(self):
        """Demostraci√≥n 2: Algoritmos de Ordenamiento"""
        self.print_header("DEMOSTRACI√ìN 2: ALGORITMOS DE ORDENAMIENTO")
        
        # Datos de ejemplo
        peliculas = [
            {"titulo": "Avengers", "rating": 9.0, "genero": "Acci√≥n"},
            {"titulo": "Titanic", "rating": 8.5, "genero": "Drama"},
            {"titulo": "Inception", "rating": 8.8, "genero": "Ciencia Ficci√≥n"},
            {"titulo": "The Dark Knight", "rating": 9.2, "genero": "Acci√≥n"},
            {"titulo": "Pulp Fiction", "rating": 8.9, "genero": "Crimen"}
        ]
        
        self.print_info("Ordenando pel√≠culas por rating usando QuickSort...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/ordenamiento/quicksort-peliculas",
                json={"peliculas": peliculas}
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success("Pel√≠culas ordenadas por QuickSort:")
                for i, pelicula in enumerate(data['peliculas_ordenadas'], 1):
                    print(f"  {i}. {pelicula['titulo']} - Rating: {pelicula['rating']}")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
    
    def demo_3_algoritmos_busqueda(self):
        """Demostraci√≥n 3: Algoritmos de B√∫squeda"""
        self.print_header("DEMOSTRACI√ìN 3: ALGORITMOS DE B√öSQUEDA")
        
        # Datos ordenados para b√∫squeda binaria
        peliculas_ordenadas = [
            {"titulo": "Avengers", "rating": 9.0},
            {"titulo": "Inception", "rating": 8.8},
            {"titulo": "Pulp Fiction", "rating": 8.9},
            {"titulo": "The Dark Knight", "rating": 9.2},
            {"titulo": "Titanic", "rating": 8.5}
        ]
        
        self.print_info("Buscando 'Inception' usando b√∫squeda binaria...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/busqueda/binaria-peliculas",
                json={
                    "peliculas_ordenadas": peliculas_ordenadas,
                    "titulo_buscar": "Inception"
                }
            )
            if response.status_code == 200:
                data = response.json()
                if data['pelicula_encontrada']:
                    pelicula = data['pelicula_encontrada']
                    self.print_success(f"Pel√≠cula encontrada: {pelicula['titulo']} - Rating: {pelicula['rating']}")
                else:
                    self.print_info("Pel√≠cula no encontrada")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
        
        # B√∫squeda lineal con filtros
        peliculas = [
            {"titulo": "Avengers", "rating": 9.0, "genero": "Acci√≥n", "duracion": 150, "precio": 12},
            {"titulo": "Titanic", "rating": 8.5, "genero": "Drama", "duracion": 195, "precio": 10},
            {"titulo": "Inception", "rating": 8.8, "genero": "Ciencia Ficci√≥n", "duracion": 148, "precio": 11},
            {"titulo": "The Dark Knight", "rating": 9.2, "genero": "Acci√≥n", "duracion": 152, "precio": 13},
            {"titulo": "Pulp Fiction", "rating": 8.9, "genero": "Crimen", "duracion": 154, "precio": 9}
        ]
        
        self.print_info("B√∫squeda lineal con filtros (g√©nero: Acci√≥n, duraci√≥n < 160)...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/busqueda/lineal-filtros",
                json={
                    "peliculas": peliculas,
                    "filtros": {
                        "genero": "Acci√≥n",
                        "duracion_max": 160
                    }
                }
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success(f"Pel√≠culas encontradas: {data['total_resultados']}")
                for pelicula in data['peliculas_encontradas']:
                    print(f"  - {pelicula['titulo']} ({pelicula['genero']}, {pelicula['duracion']}min)")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
    
    def demo_4_integracion_flujo_real(self):
        """Demostraci√≥n 4: Integraci√≥n en Flujo Real"""
        self.print_header("DEMOSTRACI√ìN 4: INTEGRACI√ìN EN FLUJO REAL")
        
        self.print_info("Simulando flujo completo de compra con algoritmos integrados...")
        
        # Paso 1: Obtener pel√≠culas con ordenamiento autom√°tico
        self.print_info("1. Obteniendo pel√≠culas con ordenamiento autom√°tico...")
        try:
            response = self.session.get(f"{BASE_URL}/peliculas?ordenar_por=rating&algoritmo=quicksort")
            if response.status_code == 200:
                data = response.json()
                self.print_success(f"Pel√≠culas obtenidas: {len(data['peliculas'])}")
                self.print_info(f"Algoritmo aplicado: {data.get('algoritmo_utilizado', 'N/A')}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
        
        # Paso 2: B√∫squeda con filtros
        self.print_info("2. B√∫squeda con filtros m√∫ltiples...")
        try:
            response = self.session.post(
                f"{BASE_URL}/peliculas/buscar",
                json={
                    "genero": "Acci√≥n",
                    "duracion_max": 150,
                    "precio_max": 15
                }
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success(f"Pel√≠culas encontradas: {len(data['peliculas'])}")
                self.print_info(f"Algoritmo de b√∫squeda: {data.get('algoritmo_utilizado', 'N/A')}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
        
        # Paso 3: Generaci√≥n QR recursiva
        self.print_info("3. Generando QR recursivo para entrada...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/recursivos/generar-qr",
                json={"datos": "ENTRADA_CINEMAX_2024_001"}
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success("QR generado exitosamente")
                self.print_info(f"Algoritmo: {data['algoritmo']}")
                self.print_info(f"Complejidad: {data['complejidad']}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
    
    def demo_5_metricas_rendimiento(self):
        """Demostraci√≥n 5: M√©tricas de Rendimiento"""
        self.print_header("DEMOSTRACI√ìN 5: M√âTRICAS DE RENDIMIENTO")
        
        # Benchmark de algoritmos
        self.print_info("Ejecutando benchmark de algoritmos...")
        try:
            response = self.session.post(
                f"{BASE_URL}/algoritmos/benchmark/rendimiento",
                json={
                    "algoritmo": "quicksort",
                    "datos": [
                        {"id": i, "valor": 100 - i} for i in range(1000)
                    ]
                }
            )
            if response.status_code == 200:
                data = response.json()
                self.print_success("Benchmark completado:")
                self.print_info(f"Tiempo de ejecuci√≥n: {data.get('tiempo_ejecucion', 'N/A')}ms")
                self.print_info(f"Memoria utilizada: {data.get('memoria_utilizada', 'N/A')}MB")
                self.print_info(f"Complejidad te√≥rica: {data.get('complejidad_teorica', 'N/A')}")
            else:
                self.print_error(f"Error: {response.text}")
        except Exception as e:
            self.print_error(f"Error de conexi√≥n: {e}")
    
    def run_demo_completa(self):
        """Ejecutar demostraci√≥n completa"""
        print("üé¨ CINEMAX API - DEMOSTRACI√ìN DE ALGORITMOS")
        print("="*60)
        print("Esta demostraci√≥n muestra la integraci√≥n de algoritmos")
        print("en una aplicaci√≥n real de gesti√≥n de cine.")
        print("="*60)
        
        # Ejecutar todas las demostraciones
        self.demo_1_algoritmos_recursivos()
        time.sleep(2)
        
        self.demo_2_algoritmos_ordenamiento()
        time.sleep(2)
        
        self.demo_3_algoritmos_busqueda()
        time.sleep(2)
        
        self.demo_4_integracion_flujo_real()
        time.sleep(2)
        
        self.demo_5_metricas_rendimiento()
        
        # Resumen final
        self.print_header("RESUMEN DE LA DEMOSTRACI√ìN")
        self.print_success("‚úÖ Algoritmos recursivos funcionando")
        self.print_success("‚úÖ Algoritmos de ordenamiento optimizados")
        self.print_success("‚úÖ Algoritmos de b√∫squeda eficientes")
        self.print_success("‚úÖ Integraci√≥n transparente en flujo real")
        self.print_success("‚úÖ M√©tricas de rendimiento disponibles")
        
        print("\nüéØ Puntos Clave:")
        print("  ‚Ä¢ Los algoritmos se ejecutan autom√°ticamente")
        print("  ‚Ä¢ No requiere intervenci√≥n manual del usuario")
        print("  ‚Ä¢ Optimizaci√≥n de rendimiento transparente")
        print("  ‚Ä¢ Fallbacks inteligentes para robustez")
        print("  ‚Ä¢ Arquitectura escalable y mantenible")
        
        print("\nüöÄ Cinemax API demuestra que los algoritmos")
        print("   no son solo teor√≠a, sino herramientas poderosas")
        print("   para aplicaciones reales de producci√≥n.")

if __name__ == "__main__":
    demo = DemoExposicion()
    demo.run_demo_completa() 